
#if a device, detects an (uN, uA, uDX) value instruction (see netcfg.json for the configuration) => change next hop IP, MAC, create/remove SRv6, etc

#uN----------------
On each hop the insert on the dst_IP is read (fcbb:bb00:x:y:z:...) when it gets to the switch represented by 
(fcbb:bb00:x) the forwarding uses a mask of 48 bits, is applyed a transfromation that removes the x value
(16 bit shift of all at it's right) and saves it as (fcbb:bb00:y:z:...) to be used to determine the next hop value  

The final switch must always be in the instruction as the last hop, the other switches are optional,
the uN instruction can include at the most 4 switches, including the final one

#uA----------------
uA instructions need to previosly be pushed to the switch that will use them, 
to see the rules that are now pushed to the devices (and how they work) go to config/ua_config.txt


------------------------------INSERT SRv6 INSTRUCTIONS
Commands structure: srv6-insert device IP_src IP_dst mask_src mask_dst flow uN_instruction


# use case 1 (only uN) WE only care about uN instruction in this project
# at r1, send packets h1_1 -> h2_1 (flow = 2) to pass on r8, r7, r2
# at r2, send packets h2_1 -> h1_1 (flow = 2) to pass on r7, r8, r1
srv6-insert device:r1 2001:1:1::1 2001:1:2::1 128 128 2 fcbb:bb00:8:7:2:fd00::
srv6-insert device:r2 2001:1:2::1 2001:1:1::1 128 128 2 fcbb:bb00:7:8:1:fd00::


# use case 2  (uA and uN)
# at r1, send packets h1_1 -> h2_1 (flow = 2) , will have 2 instructions with a order (uA: 9 -> 10)   (uN: 12 -> 2)
# when it gets to 9 and 10, the instruction will have been modified to match the respective uA instructions of each switch
# on config/ua_config.txt, will modify the packet and the final instruction will set the packet to at least go to the switches
# r1, r9, r4 , r10, r5, r12, r2
srv6-insert device:r1 2001:1:1::1 2001:1:2::1 128 128 2 fcbb:bb00:9:fa94:a:faa5:b:c fcbb:bb00:e:2:fd00::


# use case 3 (only uN) 
# at r1, send packets h1_1 -> h2_1 (flow = 2) to pass on r12, r2
srv6-insert device:r1 2001:1:1::1 2001:1:2::1 128 128 2 fcbb:bb00:c:2:fd00::


# use case 4 (only uN) 
# at r3, send packets h3_1 -> h2_1 (flow = 2) to pass on r12, r6, r2
srv6-insert device:r3 2001:1:3::1 2001:1:2::1 128 128 2 fcbb:bb00:c:6:2:fd00::


# use case 5 (only uN) 
# at r3, send packets h3_1 -> h2_1 (flow = 2) to pass on r14 r2
srv6-insert device:r3 2001:1:3::1 2001:1:2::1 128 128 2 fcbb:bb00:e:2:fd00::


# use case 6 (only uN) 
# at r1, send packets h1_1 -> h3_1 (flow = 2) to pass on r7, r3
srv6-insert device:r1 2001:1:1::1 2001:1:3::1 128 128 2 fcbb:bb00:7:3:fd00:: 



------------------------------REMOVE SRv6 INSTRUCTIONS (all rules that match the parameters)
Commands structure: srv6-remove device IP_src IP_dst mask_src mask_dst flow


# at r1, REMOVE rule that: send packets h1_1 -> h3_1 (flow = 2)
srv6-remove device:r1 2001:1:1::1 2001:1:3::1 128 128 2 