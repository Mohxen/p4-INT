#--------------------mininet logs
make mn-log

#--------------------BMv2 logs, created on P4 by doing log_msg("") in the code
tmp/switchID/stratum_bmv2.log
 * Example: log_msg("User defined message");
 * or log_msg("Value1 = {}, Value2 = {}",{value1, value2});

#--------------------At first execution
make deps 

#influxdb, to install see the file "prepare inluxdb.txt"
#grafana, to install see the file "prepare grafana.txt"

#to help dissecting INT reports, install wirehsark plugin located at "util/wireshark/P4INT_report_IPV6.lua"
#it's limited to a fixed certain number of hops, buts easy to modify it to a different number and new report's fields
#some data is displeyed incorrectly

#the used stratum image is a custom image of stratrum version: 2022-06-30 built from source by modifying the Dockerfile 
(see file Dockerfile at util/stratum/Dockerfile) adding X11, pip3 at runtime and scapy to it, dropped at /tools/mininet/ to compile it,  
the image was compiled with name:davidcc73/ngsdn-tutorial:stratum_bmv2_X11_scapy
(the official installation script contains some small naming errors that will pop up during compilation)
the image was published at docker hub, and is pulled from there, by doing make deps

#--------------------Start ONOS and mininet. Execute this commands in groups, not all at once
sudo make stop    #sudo is need to delete the old interfaces created by the mininet, or the new ones will be buggy
sudo mn -c
make clean
xhost +
sudo make start
make app-build      #only if P4 or ONOS code was modified or make clean was executed

make app-reload
make netcfg

#--------------------at ONOS cli (make onos-cli)
source /config/routing_tables.txt
source /config/ua_config.txT
source /config/INT_Tables/INT_Transit_config.txT
# will push all rules from files at config\INT_Tables and sub-direories to their respective switches, NO SPACES BEFORE COMMANDS
INT_Role-set                    


#--------------------at mininet cli (make mn-cli) for the hosts be detected in the ropology send a packet from them
h1 ping h2
h2 ping h1


#--------------------Start the INT collector
Note: make sure the collector (THE SYSTEM RUNNING IT) is syncronized with an ntp or rather manually syn it
sudo python INT/receive/collector_influxdb.py 



#--------------------To create INT traffic
# At a h2 terminal run:
python3 /INT/receive/receive.py 

# At a h1 terminal run (xterm h1 h2):  
h1 python3 /INT/send/send.py --ip h2 --l4 udp --port 443 --m INTH1 --c 1


#The generated telemetry should be visible in the grafana dashboard


#--------------------at ONOS cli (make onos-cli)
#---srv6_insert.txt (go and return from h1->h2)
#--use case1: Insert the uSID routing directive to the the two end routers
srv6-insert device:r1 fcbb:bb00:8:7:2:fd00:: 2001:1:2::1
srv6-insert device:r2 fcbb:bb00:7:8:1:fd00:: 2001:1:1::1

#--use case 2 (only go from h1 to h2, on the back path the packet will vary route)
srv6-insert device:r1 fcbb:bb00:9:fa94:a:faa5:b:c fcbb:bb00:e:2:fd00:: 2001:1:2::1


#--------python3 scrits to create ba chat like traffic between h1 and h2 using tcp, 
#can not be used at mininet, server does not reply to the SYN packet, probably mininet is blocking it on how simulates hosts
python3 /INT/h1_tcp.py
python3 /INT/h2_tcp.py