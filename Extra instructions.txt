#--------------------mininet logs
make mn-log

#--------------------BMv2 logs, created on P4 by doing log_msg("") in the code
tmp/switchID/stratum_bmv2.log
 * Example: log_msg("User defined message");
 * or log_msg("Value1 = {}, Value2 = {}",{value1, value2});

#--------------------At first execution
#install docker for ubuntu (ubuntu uses a diferent version) https://docs.docker.com/engine/install/ubuntu/
sudo apt install python3-pip
sudo pip3 install scapy
sudo make deps 

#influxdb, to install see the file "prepare inluxdb.txt"
#grafana, to install see the file "prepare grafana.txt"  url=http://localhost:3000/

#to help dissecting INT reports, install wirehsark plugin located at "util/wireshark/P4INT_report_IPV6.lua"
#into /usr/lib/x86_64-linux-gnu/wireshark/plugins/
#it's limited to a fixed certain number of hops, buts easy to modify it to a different number and new report's fields
#some data is displeyed incorrectly, trust the one printed by the INT collector

#the used stratum image is a custom image of stratrum version: 2022-06-30 built from source by modifying the Dockerfile 
(see file Dockerfile at util/stratum/Dockerfile) adding X11, pip3 at runtime and scapy to it, dropped at /tools/mininet/ to compile it,  
the image was compiled with name:davidcc73/ngsdn-tutorial:stratum_bmv2_X11_scapy
(the official installation script contains some small naming errors that will pop up during compilation)
the image was published at docker hub, and is pulled from there, by doing make deps

#--------------------Start ONOS and mininet. Execute this commands in groups, not all at once
sudo make stop                                      #Delete the mininet and ONOS containers
sudo mn -c                                          #Delete virtual interfaces that mininet created
make clean                                          #Delete P4 and ONOS compilations
xhost +                                             #Enable X11 forwarding
sudo make start                                     #Start ONOS and mininet containers
sudo make app-build                                 #Recompile P4 code and ONOS apps

make app-reload                                     #Push ONOS apps to ONOS
make netcfg                                         #Push mininet topology to ONOS

#--------------------at ONOS cli (make onos-cli)
source /config/routing_tables.txt                   #Push routing rules to switchs
source /config/ua_config.txT
source /config/INT_Tables/INT_Transit_config.txT    #Push INT instructions to switchs
INT_Role-set                                        #Push INT roles at config\INT_Tables to switchs, 1 file peer device               
Packet_Priority-set                                 #Push packet priority values to all switchs

#--------------------at mininet cli (make mn-cli) for the hosts be detected in the ropology send a packet from them
h1_1 ping h2_1
h2_1 ping h1_1
h1_2 ping h2_2
h2_2 ping h1_2


#--------------------Start the INT collector
Note: make sure the collector (THE SYSTEM RUNNING IT) is syncronized with an ntp or rather manually syn it
sudo python3 INT/receive/collector_influxdb.py 



#--------------------To create INT traffic
# At a h2_1 terminal run:
python3 /INT/receive/receive.py 

# At h1_1 terminal run with real ips (xterm h1_1 h2_1):  
h1_1 python3 /INT/send/send.py --ip h2_1 --l4 udp --port 443 --m INTH1 --dscp 18 --c 1


#The generated telemetry should be visible in the grafana dashboard


#--------------------at ONOS cli (make onos-cli)
#all the other hop choises are static and use the dst IP to always forward the packet to the same next hop, 
#defined at config\routing_tables.txt

# use case 1
# at h1_1 send packets destined to h2_1 to pass on r8
# at h2_1 send packets destined to h1_1 to pass on r7
srv6-insert device:r1 fcbb:bb00:8:7:2:fd00:: 2001:1:2::1
srv6-insert device:r2 fcbb:bb00:7:8:1:fd00:: 2001:1:1::1

# use case 2
# at r1 send packets destined to h2_1 to pass on r9 and then r14
srv6-insert device:r1 fcbb:bb00:9:fa94:a:faa5:b:c fcbb:bb00:e:2:fd00:: 2001:1:2::1



#--------python3 scrits to create ba chat like traffic between h1 and h2_1 using tcp, 
#can not be used at mininet, server does not reply to the SYN packet, probably mininet is blocking it on how simulates hosts
python3 /INT/h1_tcp.py
python3 /INT/h2_tcp.py